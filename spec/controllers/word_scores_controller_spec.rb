require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe WordScoresController, type: :controller do

  # This should return the minimal set of attributes required to create a valid
  # WordScore. As you add validations to WordScore, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    skip("Add a hash of attributes valid for your model")
  }

  let(:invalid_attributes) {
    skip("Add a hash of attributes invalid for your model")
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # WordScoresController. Be sure to keep this updated too.
  # let(:valid_session) { {} }

  describe "GET #index" do
    it "assigns all word_scores as @word_scores" do
      word_score1 = WordScore.create(word: "foo", score: 45)
      word_score2 = WordScore.create(word: "bar", score: 35)
      get :index
      expect(assigns(:word_scores)).to eq([word_score1, word_score2])
    end
  end

  # xdescribe "GET #show" do
  #   it "assigns the requested word_score as @word_score" do
  #     word_score = WordScore.create! valid_attributes
  #     get :show, {:id => word_score.to_param}, valid_session
  #     expect(assigns(:word_score)).to eq(word_score)
  #   end
  # end

  describe "GET #new" do
    it "assigns a new word_score as @word_score" do
      get :new
      expect(assigns(:word_score)).to be_a_new(WordScore)
    end
  end

  # xdescribe "GET #edit" do
  #   it "assigns the requested word_score as @word_score" do
  #     word_score = WordScore.create! valid_attributes
  #     get :edit, {:id => word_score.to_param}, valid_session
  #     expect(assigns(:word_score)).to eq(word_score)
  #   end
  # end

  xdescribe "POST #create" do
    context "with valid params" do
      it "creates a new WordScore" do
        expect {
          post :create, {word: "foo"}
        }.to change(WordScore, :count).by(1)
      end

      it "assigns a newly created word_score as @word_score" do
        post :create, {:word_score => valid_attributes}, valid_session
        expect(assigns(:word_score)).to be_a(WordScore)
        expect(assigns(:word_score)).to be_persisted
      end

      it "redirects to the created word_score" do
        post :create, {:word_score => valid_attributes}, valid_session
        expect(response).to redirect_to(WordScore.last)
      end
    end

    context "with invalid params" do
      it "assigns a newly created but unsaved word_score as @word_score" do
        post :create, {:word_score => invalid_attributes}, valid_session
        expect(assigns(:word_score)).to be_a_new(WordScore)
      end

      it "re-renders the 'new' template" do
        post :create, {:word_score => invalid_attributes}, valid_session
        expect(response).to render_template("new")
      end
    end
  end

  # xdescribe "PUT #update" do
  #   context "with valid params" do
  #     let(:new_attributes) {
  #       skip("Add a hash of attributes valid for your model")
  #     }

  #     it "updates the requested word_score" do
  #       word_score = WordScore.create! valid_attributes
  #       put :update, {:id => word_score.to_param, :word_score => new_attributes}, valid_session
  #       word_score.reload
  #       skip("Add assertions for updated state")
  #     end

  #     it "assigns the requested word_score as @word_score" do
  #       word_score = WordScore.create! valid_attributes
  #       put :update, {:id => word_score.to_param, :word_score => valid_attributes}, valid_session
  #       expect(assigns(:word_score)).to eq(word_score)
  #     end

  #     it "redirects to the word_score" do
  #       word_score = WordScore.create! valid_attributes
  #       put :update, {:id => word_score.to_param, :word_score => valid_attributes}, valid_session
  #       expect(response).to redirect_to(word_score)
  #     end
  #   end

  #   context "with invalid params" do
  #     it "assigns the word_score as @word_score" do
  #       word_score = WordScore.create! valid_attributes
  #       put :update, {:id => word_score.to_param, :word_score => invalid_attributes}, valid_session
  #       expect(assigns(:word_score)).to eq(word_score)
  #     end

  #     it "re-renders the 'edit' template" do
  #       word_score = WordScore.create! valid_attributes
  #       put :update, {:id => word_score.to_param, :word_score => invalid_attributes}, valid_session
  #       expect(response).to render_template("edit")
  #     end
  #   end
  # end

  # xdescribe "DELETE #destroy" do
  #   it "destroys the requested word_score" do
  #     word_score = WordScore.create! valid_attributes
  #     expect {
  #       delete :destroy, {:id => word_score.to_param}, valid_session
  #     }.to change(WordScore, :count).by(-1)
  #   end

  #   it "redirects to the word_scores list" do
  #     word_score = WordScore.create! valid_attributes
  #     delete :destroy, {:id => word_score.to_param}, valid_session
  #     expect(response).to redirect_to(word_scores_url)
  #   end
  # end

end
